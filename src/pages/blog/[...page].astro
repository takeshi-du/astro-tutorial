---
// src/pages/blog/[...page].astro
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content'; // CollectionEntryをインポート
import type { Page } from 'astro'; // Page型をインポート(必要に応じて)
// import { getPostUrl } from '../../utils/url'; // ← PostListItemに移動したので削除
import BaseLayout from '../../layouts/BaseLayout.astro'; // ← レイアウトをBaseLayoutに変更(例)
import PostListItem from '../../components/PostListItem.astro'; // ← 作成したコンポーネントをインポート

export async function getStaticPaths({ paginate }) {
  const allPosts = await getCollection('blog');
  const sortedPosts = allPosts.sort((a, b) =>
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );
  return paginate(sortedPosts, { pageSize: 5 });
}

// Page型の定義 (前の手順で作成した CustomPageData などを使用)
interface CustomPageData {
  data: CollectionEntry<'blog'>[];
  start: number;
  end: number;
  size: number;
  total: number;
  currentPage: number;
  lastPage: number;
  url: {
    current: string;
    next?: string;
    prev?: string;
  };
}
interface Props {
  page: CustomPageData;
}
const { page } = Astro.props as Props;
---
<BaseLayout title={`ブログ記事一覧 - ${page.currentPage}ページ目`}>
  <div class="max-w-3xl mx-auto px-4 py-20"> {/* コンテンツ全体のコンテナ */}
    <h1 class="text-3xl md:text-4xl font-bold text-center mb-4 text-gray-800">ブログ記事一覧</h1>
    <p class="text-center text-gray-600 mb-8">{page.start + 1}件目から{page.end + 1}件目を表示 ({page.total}件中)</p>

    <ul class="space-y-8"> {/* 記事間のスペース */}
      {/* page.data を map して PostListItem コンポーネントを呼び出す */}
      {page.data.map((post) => (
        <PostListItem post={post} />
      ))}
    </ul>

    {/* ページネーションリンク (Tailwindでスタイル付け) */}
    <nav aria-label="ページネーション" class="flex justify-center items-center space-x-4 mt-12 mb-8">
      {page.url.prev ? (
        <a href={page.url.prev} class="px-4 py-2 border border-gray-300 rounded hover:bg-gray-100 transition duration-200">
          &larr; 前のページへ
        </a>
      ) : (
        <span class="px-4 py-2 border border-gray-200 rounded text-gray-400 cursor-not-allowed">
          &larr; 前のページへ
        </span>
      )}

      <span class="text-gray-700">
        {page.currentPage} / {page.lastPage} ページ
      </span>

      {page.url.next ? (
        <a href={page.url.next} class="px-4 py-2 border border-gray-300 rounded hover:bg-gray-100 transition duration-200">
          次のページへ &rarr;
        </a>
      ) : (
        <span class="px-4 py-2 border border-gray-200 rounded text-gray-400 cursor-not-allowed">
          次のページへ &rarr;
        </span>
      )}
    </nav>
  </div>
</BaseLayout>
---
// レイアウトコンポーネント (BlogPostLayout.astro)
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';

import type { CollectionEntry } from 'astro:content'; // ブログ記事の場合など

// ページから受け取るPropsの型定義
interface Props {
  title: string;
  description: string;
  ogImage?: string | ImageMetadata; // 画像パス(string) または importした画像メタデータ
  ogType?: 'website' | 'article'; // ページタイプ (デフォルトは website)
  // 必要に応じて他のPropsを追加 (例: publishedTime など)
}

// Propsを受け取り、デフォルト値を設定
const {
  title = 'サイトのデフォルトタイトル',
  description = 'サイトのデフォルト説明文',
  ogImage, // 画像データ or パス
  ogType = 'website' // デフォルトは 'website'
} = Astro.props;

// サイトのベースURLを取得 (astro.config.mjs の site が必要)
const siteUrl = Astro.site;
if (!siteUrl) {
  console.warn("astro.config.mjs の 'site' オプションが設定されていません。絶対URLが生成できません。");
}

// 現在ページの絶対URLを生成
const pageUrl = siteUrl ? new URL(Astro.url.pathname, siteUrl).toString() : Astro.url.pathname;

// OGP画像の絶対URLを生成
let absoluteOgImageUrl: string | undefined = undefined;
if (ogImage) {
  if (typeof ogImage === 'string') {
    // 文字列パスの場合 (例: '/images/default-ogp.png' や Markdownからの相対パス)
    // siteUrl があれば絶対URLに、なければそのまま使う (相対パスは機能しない可能性あり)
    absoluteOgImageUrl = siteUrl ? new URL(ogImage, siteUrl).toString() : ogImage;
  } else if (typeof ogImage === 'object' && 'src' in ogImage) {
    // import した画像メタデータの場合 (ImageMetadata)
    // .src にはビルド後のパスが入るので、絶対URLにする
    absoluteOgImageUrl = siteUrl ? new URL(ogImage.src, siteUrl).toString() : ogImage.src;
  }
} else {
  // OGP画像が指定されなかった場合のデフォルト画像 (任意)
  // 例: public/default-ogp.png を用意しておく
   if (siteUrl) {
     absoluteOgImageUrl = new URL('/default-ogp.png', siteUrl).toString();
   }
}

// サイト共通の構造化データを作成
const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": title, // フロントマターで定義したサイト名変数
  "url": siteUrl ? siteUrl.toString() : "/", // Astro.site から取得
  // 必要に応じて "description" なども追加
};
// ページ固有の構造化データを生成 (例: ブログ記事の場合)
let pageSchema = null;
if (ogType === 'article' && Astro.props.pubDate) { // ogTypeが'article'で公開日がある場合など
  pageSchema = {
    "@context": "https://schema.org",
    "@type": "BlogPosting", // または Article など
    "headline": title,
    "description": description, // OGPと同じ説明文を使う場合
    "image": absoluteOgImageUrl, // OGPと同じ画像URLを使う場合
    "url": pageUrl, // 現在ページの絶対URL
    "datePublished": new Date(Astro.props.pubDate).toISOString(), // 日付をISO形式に
    // 必要に応じて "author", "publisher" なども追加
    "author": { // 例
      "@type": "Person", // または Organization
      "name": "あなたの名前または組織名"
    },
    "publisher": { // 例
      "@type": "Organization",
      "name": siteName,
      "logo": {
        "@type": "ImageObject",
        "url": siteUrl ? new URL('/logo-for-schema.png', siteUrl).toString() : '/logo-for-schema.png' // ロゴ画像URL (public/ に配置)
      }
    }
  };
}

// サイト固有の情報
const siteName = "あなたのサイト名";
const twitterHandle = "@your_twitter_handle"; // あなたのTwitterハンドル (任意)
---
<!doctype html>
<html lang="ja">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/astro-tutorial/favicon.svg" />
		<title>{title ?? 'Astroチュートリアル'}</title>

		{/* ↓ サイト共通の構造化データを追加 */}
		<script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />
		{/* ↓ ページ固有の構造化データを追加 (pageSchemaが存在する場合のみ) */}
		{pageSchema && (
			<script type="application/ld+json" set:html={JSON.stringify(pageSchema)} />
		)}

		{/* 基本的なメタタグ */}
		<meta name="description" content={description} />

		{/* OGPタグ (Facebook, etc.) */}
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:url" content={pageUrl} />
		<meta property="og:site_name" content={siteName} />
		{absoluteOgImageUrl && <meta property="og:image" content={absoluteOgImageUrl} />}
		<meta property="og:type" content={ogType} />
		{/* 必要ならロケールなども追加 <meta property="og:locale" content="ja_JP" /> */}
	
		{/* Twitterカードタグ */}
		<meta name="twitter:card" content="summary_large_image" /> {/* 大きな画像付きカード */}
		{twitterHandle && <meta name="twitter:site" content={twitterHandle} />}
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		{absoluteOgImageUrl && <meta name="twitter:image" content={absoluteOgImageUrl} />}
	
		{/* ページ固有のhead要素を追加するためのスロット (任意) */}
		{/* <slot name="head" /> */}
	</head>
	<body>
		<Header />
    <main>
      <slot /> {/* ← ここにMarkdown本文の内容が挿入される */}
    </main>
		<Footer />
	</body>
</html>